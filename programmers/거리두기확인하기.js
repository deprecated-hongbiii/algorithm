function solution(places) {
  var answer = [];
  /**
   * 
   - Î™®Îì† ÏùëÏãúÏûêÍ∞Ä ÏÑúÎ°ú! Îß®Ìï¥Ìäº Í±∞Î¶¨ 3 Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï®
   - ÌïòÏßÄÎßå ÏÇ¨Ïù¥Í∞Ä ÌååÌã∞ÏÖòÏúºÎ°ú ÎßâÌòÄÏûàÎã§Î©¥ Îß®Ìï¥Ìäº Í±∞Î¶¨ 2 Ïù¥ÌïòÏó¨ÎèÑ Í¥úÏ∞ÆÏùå
   - ÏÑúÎ°ú Í±∞Î¶¨Í∞Ä Î™áÏù∏ÏßÄ Îã§ Íµ¨Ìï¥Î≥¥Îäî ÏàòÎ∞ñÏóê ÏóÜÏùå (ÏôÑÏ†ÑÌÉêÏÉâ)
   - ÏÇ¨Îûå ÏÇ¨Ïù¥Ïùò Í±∞Î¶¨Îäî Ï¢åÌëú(Ïù∏Îç±Ïä§ Ïåç) Ï∞æÏïÑÏÑú Íµ¨ÌïòÎ©¥ Îê®
      - Î∞òÎ≥µÎ¨∏ ÎèåÎ©¥ÏÑú PÍ∞Ä ÎÇòÏò§Î©¥ [i, j]Î•º Ïïå Ïàò ÏûàÏùå
   - Îß®Ìï¥Ìäº Í±∞Î¶¨Í∞Ä 2 Ïù¥ÌïòÏù∏ Îëê ÏÇ¨Îûå ÏÇ¨Ïù¥Ïóê ÌååÌã∞ÏÖòÏù¥ ÏûàÎäîÏßÄ ÌïúÎ≤à Îçî Ï≤¥ÌÅ¨
      - Îëê ÏÇ¨ÎûåÏùò Ï¢åÌëúÎäî 3Í∞ÄÏßÄ Í≤ΩÏö∞ Ï§ë ÌïòÎÇòÏù¥Îã§.
      - Í∞ôÏùÄ x Ï¢åÌëúÎ•º Í∞ÄÏßÄÎäî Í≤ΩÏö∞ üëâ yÏ¢åÌëúÎßå Î≥ÄÍ≤ΩÌïòÎ©¥ÏÑú Ìï¥Îãπ Ïù∏Îç±Ïä§Ïóê ÌååÌã∞ÏÖò ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
      - Í∞ôÏùÄ y Ï¢åÌëúÎ•º Í∞ÄÏßÄÎäî Í≤ΩÏö∞ üëâ xÏ¢åÌëúÎßå Î≥ÄÍ≤ΩÌïòÎ©¥ÏÑú Ìï¥Îãπ Ïù∏Îç±Ïä§Ïóê ÌååÌã∞ÏÖò ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
      - x, y Îëò Îã§ Îã§Î•∏ Í≤ΩÏö∞
          üëâ Ïù¥ Í≤ΩÏö∞Ïù¥Î©¥ÏÑú Îß®Ìï¥Ìäº Í±∞Î¶¨Í∞Ä 2Ïù¥Î†§Î©¥ ÎåÄÍ∞ÅÏÑ†ÏúºÎ°ú Ï°¥Ïû¨ÌïúÎã§Îäî ÎúªÏù¥Í≥†,
          Ï¢åÌëúÏùò Ï∞®Ïù¥Îäî xÍ∞íÎÅºÎ¶¨ÎèÑ 1, yÍ∞íÎÅºÎ¶¨ÎèÑ 1Ïù¥Îã§.
          Í∑∏ÎûòÏÑú Î∞òÎåÄ Î∞©Ìñ•Ïùò ÎåÄÍ∞ÅÏÑ†Ïù∏ Îëê Ïπ∏Îßå ÌôïÏù∏Ìï¥Î≥¥Î©¥ ÎêúÎã§.
   */

  const a = checkDistance(places[0]);
  const b = checkDistance(places[1]);
  const c = checkDistance(places[2]);
  const d = checkDistance(places[3]);
  const e = checkDistance(places[4]);

  return [a, b, c, d, e];
}

function checkDistance(place) {
  const matrix = place.map((row) => row.split(''));

  // PÎì§Ïùò Ï¢åÌëú Íµ¨ÌïòÍ∏∞
  const locations = [];
  for (let i = 0; i < 5; i++) {
    for (let j = 0; j < 5; j++) {
      if (matrix[i][j] === 'P') locations.push([i, j]); // Ï†ïÎ†¨ÍπåÏßÄ ÎêòÎäî Ìö®Í≥º
    }
  }

  // PÍ∞Ä ÏóÜÏúºÎ©¥ Í±∞Î¶¨ÎëêÍ∏∞ ÏßÄÌÇ§Í≥† ÏûàÎã§Í≥† Î≥¥Í≥† 1 Î¶¨ÌÑ¥
  if (!locations.length) return 1;

  // ÎëêÎ™ÖÏî© Ï°∞Ìï© Íµ¨ÌïòÍ∏∞
  const couples = combination(locations, 1).filter(
    (combi) => combi.length === 2
  );

  // couplesÏóêÏÑú Îß®Ìï¥ÌäºÍ±∞Î¶¨Í∞Ä 2 Ïù¥ÌïòÏù∏ Ï¢åÌëú ÏåçÏùÑ Í±∞Î•¥Í∏∞
  const below2 = couples.filter((couple) => {
    const [r1, c1, r2, c2] = couple.flat(1);
    return Math.abs(r1 - r2) + Math.abs(c1 - c2) <= 2 ? true : false;
  });

  // below2 Î∞òÎ≥µ ÎèåÎ©¥ÏÑú ÏÇ¨Ïù¥Ïóê ÌååÌã∞ÏÖò ÏûàÏúºÎ©¥ ÎÑòÏñ¥Í∞ÄÍ≥† ÏóÜÏúºÎ©¥ Î∞îÎ°ú Î¶¨ÌÑ¥ 0
  // Î∞òÎ≥µÎ¨∏Ïù¥ Î¨¥ÏÇ¨Ìûà ÎÅùÎÇòÎ©¥ ÎßàÏßÄÎßâÏóê Î¶¨ÌÑ¥ 1
  for (let i = 0; i < below2.length; i++) {
    const [r1, c1, r2, c2] = below2[i].flat(1);

    // Í≤ΩÏö∞ 1
    if (r1 === r2 && c1 !== c2) {
      const [min, max] = [Math.min(c1, c2), Math.max(c1, c2)];
      for (let j = min + 1; j < max; j++) {
        if (matrix[r1][j] === 'X') break;
        if (j === max - 1) return 0;
      }
    }

    // Í≤ΩÏö∞ 2
    if (c1 === c2 && r1 !== r2) {
      const [min, max] = [Math.min(r1, r2), Math.max(r1, r2)];
      for (let j = min + 1; j < max; j++) {
        if (matrix[j][c1] === 'X') break;
        if (j === max - 1) return 0;
      }
    }

    // Í≤ΩÏö∞ 3
    if (r1 !== r2 && c1 !== c2) {
      // ÏùºÎã® Î¨¥Ï°∞Í±¥ r1 < r2Î°ú Îì§Ïñ¥Ïò®Îã§Í≥† Í∞ÄÏ†ïÌïòÍ≥† ÌíÄÍ≤†Ïùå
      // Ïù¥ Í∞ÄÏ†ïÏù¥ ÌãÄÎ†∏Îã§Î©¥ combination Ìï®ÏàòÎ•º ÏàòÏ†ïÌï¥Ïïº Ìï®
      if (matrix[r1][c2] === 'X' && matrix[r2][c1] === 'X') continue;
      return 0;
    }
  }

  return 1;
}

function combination(arr, depth) {
  if (depth === arr.length) return [[], [arr[arr.length - 1]]];
  const temp = combination(arr, depth + 1); // [ [], [4] ]
  return temp.concat(temp.map((t) => [arr[depth - 1]].concat(t)));
}

console.log(
  solution([
    ['POOOP', 'OXXOX', 'OPXPX', 'OOXOX', 'POXXP'],
    ['POOPX', 'OXPXP', 'PXXXO', 'OXXXO', 'OOOPP'],
    ['PXOPX', 'OXOXP', 'OXPOX', 'OXXOP', 'PXPOX'],
    ['OOOXX', 'XOOOX', 'OOOXX', 'OXOOX', 'OOOOO'],
    ['PXPXP', 'XPXPX', 'PXPXP', 'XPXPX', 'PXPXP'],
  ])
); // [1, 0, 1, 1, 1]
